{
    "pipes": [],
    "interfaces": [
        {
            "name": "Todo",
            "id": "interface-Todo-5f8ac7f267b95aa2948ac94b5b06b234",
            "file": "src/app/todo/todo.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nexport interface Todo {\n  title:string;\n  done:boolean;\n}\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\nexport class TodoComponent implements OnInit {\n  @Input() public todo:Todo;\n  @Output() onDone: EventEmitter<any>= new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "done",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-76c0602636c43089c78df321e3b26e2d",
            "file": "src/app/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLogin",
                    "args": [
                        {
                            "name": "uname",
                            "type": ""
                        },
                        {
                            "name": "pwd",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "uname",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pwd",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private httpClient: HttpClient) { }\n  getLogin(uname, pwd) {\n    const postObject = {\n      username: uname,\n      password: pwd\n    };\n    return this.httpClient.post(\"http://localhost:3000/profile\", postObject);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CrudService",
            "id": "injectable-CrudService-31c04c5032497297de367efdcd04bdc2",
            "file": "src/app/crud.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n \n  constructor(private _http: HttpClient) { } \n\n  createUser(user){\n    return this._http.post(\"http://localhost:3000/posts\", user );\n  };\n  getAllUser(){\n    return this._http.get(\"http://localhost:3000/posts\")\n  };\n  deleteUser(user){\n    return this._http.delete(\"http://localhost:3000/posts/\" +user.id)\n  }\n  updateUser(user){\n    return this._http.put(\"http://localhost:3000/posts/\" +user.id, user)\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Employee",
            "id": "class-Employee-b9802b786299db240a338e8485b71d88",
            "file": "src/app/model/employee.model.ts",
            "type": "class",
            "sourceCode": "export class Employee {  \r\n    public id: number;\r\n    public name: string;\r\n    public email: string;\r\n    public phone: number;\r\n}  ",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "phone",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Music",
            "id": "class-Music-7b33f696dfee0b9eb68ccee3cfc41d8d",
            "file": "src/app/app.module.ts",
            "type": "class",
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { DetailsComponent } from './details/details.component';\nimport { SongsComponent } from './songs/songs.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\nimport { ThemesComponent } from './themes/themes.component';\nimport { TodoComponent } from './todo/todo.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    DetailsComponent,\n    SongsComponent,\n    UnauthorizedComponent,\n    ThemesComponent,\n    TodoComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n \nexport class Music {  \n    id?: number;  \n    employee_name?: string;  \n    employee_salary?: number;  \n    employee_age?: number;  \n}  \n",
            "properties": [
                {
                    "name": "employee_age",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "employee_name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "employee_salary",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-911fe7da1416bb8ea6a20943cec78382",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'myapp'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'myapp';\n  ngOnInit(){\n    \n    localStorage.removeItem(\"isLoggedIn\");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "  *{\r\n    padding: 0;\r\n    margin: 0;\r\n    text-decoration: none;\r\n    list-style: none;\r\n    box-sizing: border-box;\r\n} \r\n body{\r\n    font-family: monospace;\r\n}\r\n nav{\r\n    background: #ff4757;\r\n    height: 80px;\r\n    width: 100%;\r\n}\r\nlabel.logo{\r\n    color: white;\r\n    font-size: 35px;\r\n    line-height: 80px;\r\n    padding: 0 100px;\r\n    font-weight: bold;\r\n}\r\nnav ul{\r\n    float: right;\r\n    margin-right:20px;\r\n}\r\nnav ul li {\r\n    display: inline-block;\r\n    line-height: 80px;\r\n    margin: 0 5px;\r\n}\r\nnav ul li a {\r\n    color: white;\r\n    font-size: 17px;\r\n    padding: 7px 13px;\r\n    border-radius: 3px;\r\n    text-transform: uppercase;\r\n}\r\na.active,a:hover{\r\n    background: black;\r\n    transition: .5s;\r\n}\r\n.checkbtn{\r\n    font-size: 30px;\r\n    color:white;\r\n    float:right;\r\n    line-height: 80px;\r\n    margin-right: 40px;\r\n    cursor: pointer;\r\n    display: none;\r\n}\r\n#check{\r\n    display: none;\r\n\r\n}\r\n@media only screen and (max-width:952px){\r\n    label.logo{\r\n        font-size: 30px;\r\n        padding-left: 50px;\r\n    }\r\n    nav ul li a{\r\n        font-size: 16px;\r\n    }\r\n}\r\n@media only screen and (max-width:800px){\r\n    .checkbtn{\r\n        display: block;\r\n    }\r\n    ul{\r\n        position: fixed;\r\n        width: 100%;\r\n        height: 100vh;\r\n        background: #2c3e50;\r\n        top: 80px;\r\n        left: -100%;\r\n        text-align: center;\r\n        transition: all .5s;\r\n    }\r\n    nav ul li{\r\n        display: block;\r\n    }\r\n    nav ul li a{\r\n        font-size: 20px;\r\n    }\r\n    a:hover,a.active{\r\n        background: none;\r\n        color: black;\r\n\r\n    }\r\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav>\n  <input type=\"checkbox\" id=\"check\">\n  <label for=\"check\" class=\"checkbtn\">\n    <i class=\"fas fa-bars\"></i>\n  </label>\n  <label class=\"logo\" >Loading</label>\n  <ul>\n    <li> <a class=\"active\" [routerLink]=\"['/login']\"> Login </a></li>\n    <li> <a class=\"active\" [routerLink]=\"['/themes']\"> Themes </a></li>\n    <li> <a class=\"active\" [routerLink]=\"['/details']\"> details </a></li>\n    <li> <a class=\"active\" [routerLink]=\"['/songs']\"> songs </a></li>\n  </ul>\n</nav>\n\n<router-outlet> </router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "DetailsComponent",
            "id": "component-DetailsComponent-423b1ccc92ab87793692bc9ed12d48f2",
            "file": "src/app/details/details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-details",
            "styleUrls": [
                "./details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "ray",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userObj",
                    "defaultValue": "{\n    name:'',\n    mobile:'',\n    email:'',\n    password:'',\n    id:''\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "formObj",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "formObj",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnionit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "updateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CrudService } from '../crud.service';\n\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.css']\n})\nexport class DetailsComponent {\n  ray: Object;\n  user:any;\n  isEdit=false;\n\n  userObj={\n    name:'',\n    mobile:'',\n    email:'',\n    password:'',\n    id:''\n  }\n\n  constructor(private myService: CrudService) {}\n  ngOnionit(){\n    this.getLatestUser()\n  }\n\n  addUser(formObj){\n    console.log(formObj)\n    this.myService.createUser(formObj).subscribe((response)=> {\n      console.log(\"user added\")\n      this.getLatestUser();\n    })\n  }\n  getLatestUser(){\n    this.myService.getAllUser().subscribe((response)=>{\n      this.ray = response\n    })\n  }\n  editUser(user){\n    this.isEdit= true;\n    this.userObj = user;\n  }\n\n  deleteUser(user){\n    this.myService.deleteUser(user).subscribe(()=>{\n      this.getLatestUser();\n    })\n  }\n  updateUser(){\n    this.isEdit=!this.isEdit;\n    this.myService.updateUser(this.userObj).subscribe(()=>{\n      this.getLatestUser();\n    })\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "myService",
                        "type": "CrudService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "myService",
                        "type": "CrudService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container\">\n<form #myForm=\"ngForm\"\n>\n    <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">FullName</label>\n        <input type=\"email\" class=\"form-control\" name=\"name\" aria-describedby=\"emailHelp\" [(ngModel)]=\"userObj.name\">\n      </div>\n    <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">MobNumber</label>\n        <input type=\"email\" class=\"form-control\" name=\"mobile\" aria-describedby=\"emailHelp\"[(ngModel)]=\"userObj.mobile\">\n      </div>\n    <div class=\"form-group\">\n      <label for=\"exampleInputEmail1\">Email address</label>\n      <input type=\"email\" class=\"form-control\"  name=\"email\" aria-describedby=\"emailHelp\"[(ngModel)]=\"userObj.email\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"exampleInputPassword1\">Password</label>\n      <input type=\"password\" class=\"form-control\"  name=\"password\" [(ngModel)]=\"userObj.password\">\n    </div>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"addUser(myForm.value)\"\n    *ngIf=\"!isEdit\">Submit</button>\n    <button type=\"button\" class=\"btn btn-info\" *ngIf=\"isEdit\" (click)=\"updateUser()\">Update</button>\n  </form>\n  <br>\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">FullName</th>\n        <th scope=\"col\">Mobile</th>\n        <th scope=\"col\">Email</th>\n        <th scope=\"col\">Password</th>\n        <th scope=\"col\">Edit</th>\n        <th scope=\"col\">Delete</th>\n      </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let user of ray\">\n    <td> {{user.name}}</td>\n    <td> {{user.mobile}}</td>\n    <td> {{user.email}}</td>\n    <td> {{user.password}}</td>\n    <td> <button (click)=\"editUser(user)\" class=\"btn btn-success\"> Edit </button></td>\n    <td> <button (click)=\"deleteUser(user)\" class=\"btn btn-warning\"> Delete </button></td>\n    </tr>\n    </tbody>\n  </table>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-1f9e5e7036db7d008c883e8dd6dba39d",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "performLogin",
                    "args": [
                        {
                            "name": "userName",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "userName",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private service: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n\n  }\n  performLogin(userName, password) {\n    this.service.getLogin(userName.value, password.value).subscribe(res => {\n      console.log(res);\n      localStorage.setItem(\"isLoggedIn\", 'true');\n      this.router.navigate(['details']);\n    });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\nbody {\r\n\tbackground:url('http://cdn.wallpapersafari.com/13/6/Mpsg2b.jpg');\r\n\tmargin:0px;\r\n\tfont-family: 'Ubuntu', sans-serif;\r\n\t  background-size: 100% 110%;\r\n  }\r\n  h1, h2, h3, h4, h5, h6, a {\r\n\tmargin:0; padding:0;\r\n  }\r\n  .login {\r\n\tmargin:0 auto;\r\n\tmax-width:500px;\r\n  }\r\n  .login-header {\r\n\tcolor:rgb(17, 36, 71);\r\n\ttext-align:center;\r\n\tfont-size:200%;\r\n  }\r\n  .login-header h2 {\r\n\t text-shadow: 0px 5px 15px rgb(95, 66, 66);\r\n  }\r\n  .login-form {\r\n\tborder:.5px solid rgb(25, 29, 25);\r\n\tbackground:#fc4a59dc;\r\n\tborder-radius:10px;\r\n\tbox-shadow:0px 0px 10px #000;\r\n  }\r\n  .login-form h3 {\r\n\tfont-style: unset;\r\n\ttext-align:left;\r\n\tmargin-left:40px;\r\n\tcolor:#fff;\r\n  }\r\n  .login-form {\r\n\tbox-sizing:border-box;\r\n\tpadding-top:15px;\r\n    padding-bottom:10%;\r\n\tmargin:5% auto;\r\n\ttext-align:center;\r\n  }\r\n  .login input[type=\"text\"],\r\n  .login input[type=\"password\"] {\r\n\tmax-width:400px;\r\n\t  width: 80%;\r\n\tline-height:3em;\r\n\tfont-family: 'Ubuntu', sans-serif;\r\n\t\r\n\tmargin:1em 2em;\r\n\tborder-radius:5px;\r\n\tborder:2px solid #f2f2f2;\r\n\toutline:none;\r\n\tpadding-left:10px;\r\n  }\r\n  .login-form input[type=\"button\"] {\r\n\theight:30px;\r\n\twidth:100px;\r\n\tbackground:#fff;\r\n\tborder:1px solid #f2f2f2;\r\n\tborder-radius:20px;\r\n\tcolor: slategrey;\r\n\ttext-transform:uppercase;\r\n\tfont-family: 'Ubuntu', sans-serif;\r\n\tfont-weight: bold;\r\n\tcursor:pointer;\r\n  }\r\n  .sign-up{\r\n\tcolor:#f2f2f2;\r\n\tfont-size: large;\r\n\tfont-style: initial;\r\n\tmargin-left:-70%;\r\n\tcursor:pointer;\r\n\ttext-decoration:underline;\r\n  }\r\n  .no-access {\r\n\tcolor:#a8f79e;\r\n\tfont-size: medium;\r\n\tmargin:20px 0px 20px -57%;\r\n\ttext-decoration:underline;\r\n\tcursor:pointer;\r\n  }\r\n  \r\n  /*Media Querie*/\r\n  @media only screen and (min-width : 150px) and (max-width : 530px){\r\n\t.login-form h3 {\r\n\t  text-align:center;\r\n\t  margin:0;\r\n\t}\r\n\t.sign-up, .no-access {\r\n\t  margin:10px 0;\r\n\t}\r\n\t.login-button {\r\n\t  margin-bottom:10px;\r\n\t}\r\n  }",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"login\">\n  <div class=\"login-header\">\n\t<h2>Login</h2>\n\t\n  </div>\n  <div class=\"login-form\">\n    <h3>Username:</h3>\n\t<input type=\"text\" required placeholder=\"Username\" #username>\n\t<br>\n\t\n    <h3>Password:</h3>\n    <input type=\"password\" required placeholder=\"Password\" #password>\n\t<br>\n\t\n    <input type=\"button\" value=\"Login\" class=\"login-button\" (click)=\"performLogin(username, password)\"/>\n    <br>\n    <a class=\"sign-up\">Sign Up!</a>\n\t<br>\n\t\n    <h6 class=\"no-access\">Forgot Password?</h6>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SongsComponent",
            "id": "component-SongsComponent-5366756b108a78d3f796a5de5fe1c09d",
            "file": "src/app/songs/songs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-songs",
            "styleUrls": [
                "./songs.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./songs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n  \n\n@Component({\n  selector: 'app-songs',\n  templateUrl: './songs.component.html',\n  styleUrls: ['./songs.component.css']\n})\nexport class SongsComponent implements OnInit {\n \nconstructor(){}\n\nngOnInit() {}\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* a {\r\n    font-size: 26px;\r\n    color: darkblue;\r\n    text-transform: capitalize;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    margin: 25px;\r\n    text-decoration: none;\r\n    text-shadow: cornsilk;\r\n    font-family: system-ui;\r\n}\r\na:hover{\r\n    color: black;\r\n    transition:  all 1s;\r\n}  */ ",
                    "styleUrl": "./songs.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1> Songs Works </h1>"
        },
        {
            "name": "ThemesComponent",
            "id": "component-ThemesComponent-6a7f41cf45eafa8affd0ad6a02999a87",
            "file": "src/app/themes/themes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-themes",
            "styleUrls": [
                "./themes.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./themes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-themes',\n  templateUrl: './themes.component.html',\n  styleUrls: ['./themes.component.css']\n})\nexport class ThemesComponent  {\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "*{margin: 0; padding: 0;\r\n    box-sizing: border-box;}\r\n\r\n    main{\r\n        width: 75%; margin: 50px auto;\r\n        border:1px solid gray;\r\n        display: grid; color: white;\r\n        grid-template-rows: 80px 100px 200px 80px;\r\n        grid-template-columns: repeat(3,1fr) 200px;\r\n        grid-gap:10px;\r\n    }\r\n\r\n    .div1{ background-color: #ff4757;\r\n       grid-column: 1/ -1;\r\n       text-align: center;}\r\n\r\n    .div2{ background-color: #2ed573;\r\n        text-align: center;\r\n    }\r\n    .div3{ background-color: #1e90ff;\r\n        text-align: center;\r\n    }\r\n    .div4{ background-color: #5352ed;\r\n        text-align: center;\r\n    }\r\n    .div5{ background-color: #2f3542;\r\n        grid-row: 2/4; grid-column: 4/5;\r\n        text-align: center;\r\n    }\r\n    .div6{ background-color: #ffa502;\r\n        grid-column: 1/4;\r\n        text-align: center; \r\n    }\r\n    .div7{ background-color: #00d2d3;\r\n        grid-column: 1/-1;\r\n        text-align: center;\r\n    }\r\n",
                    "styleUrl": "./themes.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n<main>\r\n    <div class=\"div1\"> Header </div>\r\n    <div class=\"div2\"> Box1 </div>\r\n    <div class=\"div3\"> Box2 </div>\r\n    <div class=\"div4\"> Box3 </div>\r\n    <div class=\"div5\"> Sidebar </div>\r\n    <div class=\"div6\"> Main content </div>\r\n    <div class=\"div7\"> Footer </div>\r\n</main>"
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-5f8ac7f267b95aa2948ac94b5b06b234",
            "file": "src/app/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [
                "./todo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "line": 13,
                    "type": "Todo"
                }
            ],
            "outputsClass": [
                {
                    "name": "onDone",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nexport interface Todo {\n  title:string;\n  done:boolean;\n}\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\nexport class TodoComponent implements OnInit {\n  @Input() public todo:Todo;\n  @Output() onDone: EventEmitter<any>= new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./todo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n    <input type=\"checkbox\" [(ngModel)]=\"todo.done\" (click)= \"onDone.emit('hiiiiii')\"/>\n    {{todo.title}}\n</p>"
        },
        {
            "name": "UnauthorizedComponent",
            "id": "component-UnauthorizedComponent-da1ab39b5c128660a788fc1b863d0247",
            "file": "src/app/unauthorized/unauthorized.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-unauthorized",
            "styleUrls": [
                "./unauthorized.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./unauthorized.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.css']\n})\nexport class UnauthorizedComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./unauthorized.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>You are not authorized to view this page. Please login !</h2>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DetailsComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SongsComponent"
                        },
                        {
                            "name": "ThemesComponent"
                        },
                        {
                            "name": "TodoComponent"
                        },
                        {
                            "name": "UnauthorizedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todo/todo.component.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n   onDone: action('onDone')\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "todo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todo/todo.component.stories.ts",
                "type": "Todo",
                "defaultValue": "{\r\n    title: 'some todo item I need todo',\r\n    done: false\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/todo/todo.component.stories.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todo/todo.component.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n   onDone: action('onDone')\r\n}"
                },
                {
                    "name": "todo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todo/todo.component.stories.ts",
                    "type": "Todo",
                    "defaultValue": "{\r\n    title: 'some todo item I need todo',\r\n    done: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "details",
                        "component": "DetailsComponent",
                        "canActivate": [
                            "AuthguardService"
                        ]
                    },
                    {
                        "path": "songs",
                        "component": "SongsComponent",
                        "canActivate": [
                            "AuthguardService"
                        ]
                    },
                    {
                        "path": "themes",
                        "component": "ThemesComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "unauthorized",
                        "component": "UnauthorizedComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Music",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/authguard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthguardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/crud.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CrudService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/details/details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/employee.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Employee",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/songs/songs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/themes/themes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/unauthorized/unauthorized.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnauthorizedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}